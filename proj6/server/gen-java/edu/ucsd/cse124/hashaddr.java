/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.ucsd.cse124;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-08")
public class hashaddr implements org.apache.thrift.TBase<hashaddr, hashaddr._Fields>, java.io.Serializable, Cloneable, Comparable<hashaddr> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hashaddr");

  private static final org.apache.thrift.protocol.TField HASH_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("hashValue", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IPADDRESS1_FIELD_DESC = new org.apache.thrift.protocol.TField("IPAddress1", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PORT1_FIELD_DESC = new org.apache.thrift.protocol.TField("port1", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IPADDRESS2_FIELD_DESC = new org.apache.thrift.protocol.TField("IPAddress2", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PORT2_FIELD_DESC = new org.apache.thrift.protocol.TField("port2", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new hashaddrStandardSchemeFactory());
    schemes.put(TupleScheme.class, new hashaddrTupleSchemeFactory());
  }

  public String hashValue; // required
  public String IPAddress1; // required
  public int port1; // required
  public String IPAddress2; // required
  public int port2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HASH_VALUE((short)1, "hashValue"),
    IPADDRESS1((short)2, "IPAddress1"),
    PORT1((short)3, "port1"),
    IPADDRESS2((short)4, "IPAddress2"),
    PORT2((short)5, "port2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HASH_VALUE
          return HASH_VALUE;
        case 2: // IPADDRESS1
          return IPADDRESS1;
        case 3: // PORT1
          return PORT1;
        case 4: // IPADDRESS2
          return IPADDRESS2;
        case 5: // PORT2
          return PORT2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT1_ISSET_ID = 0;
  private static final int __PORT2_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HASH_VALUE, new org.apache.thrift.meta_data.FieldMetaData("hashValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Hash")));
    tmpMap.put(_Fields.IPADDRESS1, new org.apache.thrift.meta_data.FieldMetaData("IPAddress1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT1, new org.apache.thrift.meta_data.FieldMetaData("port1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IPADDRESS2, new org.apache.thrift.meta_data.FieldMetaData("IPAddress2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT2, new org.apache.thrift.meta_data.FieldMetaData("port2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hashaddr.class, metaDataMap);
  }

  public hashaddr() {
  }

  public hashaddr(
    String hashValue,
    String IPAddress1,
    int port1,
    String IPAddress2,
    int port2)
  {
    this();
    this.hashValue = hashValue;
    this.IPAddress1 = IPAddress1;
    this.port1 = port1;
    setPort1IsSet(true);
    this.IPAddress2 = IPAddress2;
    this.port2 = port2;
    setPort2IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public hashaddr(hashaddr other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHashValue()) {
      this.hashValue = other.hashValue;
    }
    if (other.isSetIPAddress1()) {
      this.IPAddress1 = other.IPAddress1;
    }
    this.port1 = other.port1;
    if (other.isSetIPAddress2()) {
      this.IPAddress2 = other.IPAddress2;
    }
    this.port2 = other.port2;
  }

  public hashaddr deepCopy() {
    return new hashaddr(this);
  }

  @Override
  public void clear() {
    this.hashValue = null;
    this.IPAddress1 = null;
    setPort1IsSet(false);
    this.port1 = 0;
    this.IPAddress2 = null;
    setPort2IsSet(false);
    this.port2 = 0;
  }

  public String getHashValue() {
    return this.hashValue;
  }

  public hashaddr setHashValue(String hashValue) {
    this.hashValue = hashValue;
    return this;
  }

  public void unsetHashValue() {
    this.hashValue = null;
  }

  /** Returns true if field hashValue is set (has been assigned a value) and false otherwise */
  public boolean isSetHashValue() {
    return this.hashValue != null;
  }

  public void setHashValueIsSet(boolean value) {
    if (!value) {
      this.hashValue = null;
    }
  }

  public String getIPAddress1() {
    return this.IPAddress1;
  }

  public hashaddr setIPAddress1(String IPAddress1) {
    this.IPAddress1 = IPAddress1;
    return this;
  }

  public void unsetIPAddress1() {
    this.IPAddress1 = null;
  }

  /** Returns true if field IPAddress1 is set (has been assigned a value) and false otherwise */
  public boolean isSetIPAddress1() {
    return this.IPAddress1 != null;
  }

  public void setIPAddress1IsSet(boolean value) {
    if (!value) {
      this.IPAddress1 = null;
    }
  }

  public int getPort1() {
    return this.port1;
  }

  public hashaddr setPort1(int port1) {
    this.port1 = port1;
    setPort1IsSet(true);
    return this;
  }

  public void unsetPort1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT1_ISSET_ID);
  }

  /** Returns true if field port1 is set (has been assigned a value) and false otherwise */
  public boolean isSetPort1() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT1_ISSET_ID);
  }

  public void setPort1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT1_ISSET_ID, value);
  }

  public String getIPAddress2() {
    return this.IPAddress2;
  }

  public hashaddr setIPAddress2(String IPAddress2) {
    this.IPAddress2 = IPAddress2;
    return this;
  }

  public void unsetIPAddress2() {
    this.IPAddress2 = null;
  }

  /** Returns true if field IPAddress2 is set (has been assigned a value) and false otherwise */
  public boolean isSetIPAddress2() {
    return this.IPAddress2 != null;
  }

  public void setIPAddress2IsSet(boolean value) {
    if (!value) {
      this.IPAddress2 = null;
    }
  }

  public int getPort2() {
    return this.port2;
  }

  public hashaddr setPort2(int port2) {
    this.port2 = port2;
    setPort2IsSet(true);
    return this;
  }

  public void unsetPort2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT2_ISSET_ID);
  }

  /** Returns true if field port2 is set (has been assigned a value) and false otherwise */
  public boolean isSetPort2() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT2_ISSET_ID);
  }

  public void setPort2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT2_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HASH_VALUE:
      if (value == null) {
        unsetHashValue();
      } else {
        setHashValue((String)value);
      }
      break;

    case IPADDRESS1:
      if (value == null) {
        unsetIPAddress1();
      } else {
        setIPAddress1((String)value);
      }
      break;

    case PORT1:
      if (value == null) {
        unsetPort1();
      } else {
        setPort1((Integer)value);
      }
      break;

    case IPADDRESS2:
      if (value == null) {
        unsetIPAddress2();
      } else {
        setIPAddress2((String)value);
      }
      break;

    case PORT2:
      if (value == null) {
        unsetPort2();
      } else {
        setPort2((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HASH_VALUE:
      return getHashValue();

    case IPADDRESS1:
      return getIPAddress1();

    case PORT1:
      return getPort1();

    case IPADDRESS2:
      return getIPAddress2();

    case PORT2:
      return getPort2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HASH_VALUE:
      return isSetHashValue();
    case IPADDRESS1:
      return isSetIPAddress1();
    case PORT1:
      return isSetPort1();
    case IPADDRESS2:
      return isSetIPAddress2();
    case PORT2:
      return isSetPort2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof hashaddr)
      return this.equals((hashaddr)that);
    return false;
  }

  public boolean equals(hashaddr that) {
    if (that == null)
      return false;

    boolean this_present_hashValue = true && this.isSetHashValue();
    boolean that_present_hashValue = true && that.isSetHashValue();
    if (this_present_hashValue || that_present_hashValue) {
      if (!(this_present_hashValue && that_present_hashValue))
        return false;
      if (!this.hashValue.equals(that.hashValue))
        return false;
    }

    boolean this_present_IPAddress1 = true && this.isSetIPAddress1();
    boolean that_present_IPAddress1 = true && that.isSetIPAddress1();
    if (this_present_IPAddress1 || that_present_IPAddress1) {
      if (!(this_present_IPAddress1 && that_present_IPAddress1))
        return false;
      if (!this.IPAddress1.equals(that.IPAddress1))
        return false;
    }

    boolean this_present_port1 = true;
    boolean that_present_port1 = true;
    if (this_present_port1 || that_present_port1) {
      if (!(this_present_port1 && that_present_port1))
        return false;
      if (this.port1 != that.port1)
        return false;
    }

    boolean this_present_IPAddress2 = true && this.isSetIPAddress2();
    boolean that_present_IPAddress2 = true && that.isSetIPAddress2();
    if (this_present_IPAddress2 || that_present_IPAddress2) {
      if (!(this_present_IPAddress2 && that_present_IPAddress2))
        return false;
      if (!this.IPAddress2.equals(that.IPAddress2))
        return false;
    }

    boolean this_present_port2 = true;
    boolean that_present_port2 = true;
    if (this_present_port2 || that_present_port2) {
      if (!(this_present_port2 && that_present_port2))
        return false;
      if (this.port2 != that.port2)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_hashValue = true && (isSetHashValue());
    list.add(present_hashValue);
    if (present_hashValue)
      list.add(hashValue);

    boolean present_IPAddress1 = true && (isSetIPAddress1());
    list.add(present_IPAddress1);
    if (present_IPAddress1)
      list.add(IPAddress1);

    boolean present_port1 = true;
    list.add(present_port1);
    if (present_port1)
      list.add(port1);

    boolean present_IPAddress2 = true && (isSetIPAddress2());
    list.add(present_IPAddress2);
    if (present_IPAddress2)
      list.add(IPAddress2);

    boolean present_port2 = true;
    list.add(present_port2);
    if (present_port2)
      list.add(port2);

    return list.hashCode();
  }

  @Override
  public int compareTo(hashaddr other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHashValue()).compareTo(other.isSetHashValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashValue, other.hashValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIPAddress1()).compareTo(other.isSetIPAddress1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIPAddress1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IPAddress1, other.IPAddress1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort1()).compareTo(other.isSetPort1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port1, other.port1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIPAddress2()).compareTo(other.isSetIPAddress2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIPAddress2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IPAddress2, other.IPAddress2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort2()).compareTo(other.isSetPort2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port2, other.port2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("hashaddr(");
    boolean first = true;

    sb.append("hashValue:");
    if (this.hashValue == null) {
      sb.append("null");
    } else {
      sb.append(this.hashValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IPAddress1:");
    if (this.IPAddress1 == null) {
      sb.append("null");
    } else {
      sb.append(this.IPAddress1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port1:");
    sb.append(this.port1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IPAddress2:");
    if (this.IPAddress2 == null) {
      sb.append("null");
    } else {
      sb.append(this.IPAddress2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port2:");
    sb.append(this.port2);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class hashaddrStandardSchemeFactory implements SchemeFactory {
    public hashaddrStandardScheme getScheme() {
      return new hashaddrStandardScheme();
    }
  }

  private static class hashaddrStandardScheme extends StandardScheme<hashaddr> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, hashaddr struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HASH_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hashValue = iprot.readString();
              struct.setHashValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IPADDRESS1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.IPAddress1 = iprot.readString();
              struct.setIPAddress1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PORT1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port1 = iprot.readI32();
              struct.setPort1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IPADDRESS2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.IPAddress2 = iprot.readString();
              struct.setIPAddress2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PORT2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port2 = iprot.readI32();
              struct.setPort2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, hashaddr struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hashValue != null) {
        oprot.writeFieldBegin(HASH_VALUE_FIELD_DESC);
        oprot.writeString(struct.hashValue);
        oprot.writeFieldEnd();
      }
      if (struct.IPAddress1 != null) {
        oprot.writeFieldBegin(IPADDRESS1_FIELD_DESC);
        oprot.writeString(struct.IPAddress1);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT1_FIELD_DESC);
      oprot.writeI32(struct.port1);
      oprot.writeFieldEnd();
      if (struct.IPAddress2 != null) {
        oprot.writeFieldBegin(IPADDRESS2_FIELD_DESC);
        oprot.writeString(struct.IPAddress2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT2_FIELD_DESC);
      oprot.writeI32(struct.port2);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class hashaddrTupleSchemeFactory implements SchemeFactory {
    public hashaddrTupleScheme getScheme() {
      return new hashaddrTupleScheme();
    }
  }

  private static class hashaddrTupleScheme extends TupleScheme<hashaddr> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, hashaddr struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHashValue()) {
        optionals.set(0);
      }
      if (struct.isSetIPAddress1()) {
        optionals.set(1);
      }
      if (struct.isSetPort1()) {
        optionals.set(2);
      }
      if (struct.isSetIPAddress2()) {
        optionals.set(3);
      }
      if (struct.isSetPort2()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetHashValue()) {
        oprot.writeString(struct.hashValue);
      }
      if (struct.isSetIPAddress1()) {
        oprot.writeString(struct.IPAddress1);
      }
      if (struct.isSetPort1()) {
        oprot.writeI32(struct.port1);
      }
      if (struct.isSetIPAddress2()) {
        oprot.writeString(struct.IPAddress2);
      }
      if (struct.isSetPort2()) {
        oprot.writeI32(struct.port2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, hashaddr struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.hashValue = iprot.readString();
        struct.setHashValueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.IPAddress1 = iprot.readString();
        struct.setIPAddress1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.port1 = iprot.readI32();
        struct.setPort1IsSet(true);
      }
      if (incoming.get(3)) {
        struct.IPAddress2 = iprot.readString();
        struct.setIPAddress2IsSet(true);
      }
      if (incoming.get(4)) {
        struct.port2 = iprot.readI32();
        struct.setPort2IsSet(true);
      }
    }
  }

}

