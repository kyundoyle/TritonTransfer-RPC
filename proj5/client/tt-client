#!/usr/bin/env python

import sys
import hashlib
import os

sys.path.append('gen-py')

from cse124 import TritonTransfer
from cse124.ttypes import *

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

server = ""
port = ""
operation = ""
filename = ""
down_dir = ""

def begin():
	try:
		transport = TSocket.TSocket(server, port)

	  	# Buffering is critical. Raw sockets are very slow
	  	transport = TTransport.TBufferedTransport(transport)

	  	# Wrap in a protocol
	  	protocol = TBinaryProtocol.TBinaryProtocol(transport)

	  	# Create a client to use the protocol encoder
	  	client = TritonTransfer.Client(protocol)

	  	# Connect!
	  	transport.open()

	  	client.ping()
	  	#print 'ping()'

	  	if(operation == "upload"):
	  		content = []
	  		hashlist = []
	  		rhashlist = []
	  		fo = open(filename, "r+")
	  		while True:
	  			data = fo.read(16000)
	  			if not data:
	  				break
	  			content.append(data)
	  			encode = hashlib.sha256(data).hexdigest()
	  			hashlist.append(encode)
	  		rhashlist = client.uploadFile(os.path.basename(filename), hashlist)
	  		rhashlist = list(set(rhashlist))
	  		for i in range(len(rhashlist)):
	  			for j in range(len(hashlist)):
	  				if(rhashlist[i] == hashlist[j]):
	  					client.uploadBlock(hashlist[j], content[j])
	  					break
	  		fo.close()
	  		print "OK"

	  	elif(operation == "download"):
	  		
	  		rehashlist = []
	  		rehashlist = client.downloadFile(filename)
	  		down_dir_real = os.path.realpath(down_dir)
	  		fullpath = os.path.join(down_dir_real, filename)

	  		pre_content = []
	  		pre_hashlist = []
	  		filenames = os.listdir(down_dir_real)
	  		for k in range(len(filenames)):
	  			fullname = os.path.join(down_dir_real, filenames[k])
	  			fotmp = open(fullname, "r+")
	  			while True:
	  				data = fotmp.read(16000)
	  				if not data:
	  					break
	  				pre_content.append(data)
	  				encode = hashlib.sha256(data).hexdigest()
	  				pre_hashlist.append(encode)
	  			fotmp.close()

	  		fw = open(fullpath, "w+")
	  		flag = 0
	  		for i in range(len(rehashlist)):
	  			flag = 0
	  			#print rehashlist[i]
	  			for j in range(len(pre_hashlist)):
	  				if(pre_hashlist[j] == rehashlist[i]):
	  					#print "copy content"
	  					fw.write(pre_content[j])
	  					flag = 1
	  					break
	  			#print flag
	  			if(flag == 0):
	  				re = client.downloadBlock(rehashlist[i])
	  				if(re.status == "OK"):
	  					fw.write(re.content)
	  					pre_hashlist.append(rehashlist[i])
	  					pre_content.append(re.content)
	  		fw.close()
	  		print "OK"

	  	# Close!
  	  	transport.close()	

  	except LargeBlockException:
  		print "ERROR"

  	except InvalidHashException:
  		print "ERROR"

  	except NoSuchBlockException:
  		print "ERROR"

  	except Thrift.TException, tx:
  		return '%s' % (tx.message)

if __name__ == "__main__":
	server = sys.argv[1]
	port = sys.argv[2]
	operation = sys.argv[3]
	filename = sys.argv[4]
	if(operation == "download"):
		down_dir = sys.argv[5]
	begin()
